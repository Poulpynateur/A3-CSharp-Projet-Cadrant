### YamlMime:ManagedReference
items:
- uid: EasySave.Model.Task.ITaskManager
  commentId: T:EasySave.Model.Task.ITaskManager
  id: ITaskManager
  parent: EasySave.Model.Task
  children:
  - EasySave.Model.Task.ITaskManager.AddTask(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})
  - EasySave.Model.Task.ITaskManager.GetTaskByName(System.String)
  - EasySave.Model.Task.ITaskManager.Map
  - EasySave.Model.Task.ITaskManager.RemoveTask(System.String)
  langs:
  - csharp
  - vb
  name: ITaskManager
  nameWithType: ITaskManager
  fullName: EasySave.Model.Task.ITaskManager
  type: Interface
  source:
    remote:
      path: EasySave/Model/Task/ITaskManager.cs
      branch: master
      repo: https://dev.azure.com/Groupe5/Projet%20Cadrant%202019/_git/Projet%20Cadrant%202019
    id: ITaskManager
    path: Model/Task/ITaskManager.cs
    startLine: 9
  assemblies:
  - EasySave
  namespace: EasySave.Model.Task
  summary: "\nInterface to access task manager.\n"
  example: []
  syntax:
    content: public interface ITaskManager
    content.vb: Public Interface ITaskManager
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: EasySave.Model.Task.ITaskManager.Map
  commentId: P:EasySave.Model.Task.ITaskManager.Map
  id: Map
  parent: EasySave.Model.Task.ITaskManager
  langs:
  - csharp
  - vb
  name: Map
  nameWithType: ITaskManager.Map
  fullName: EasySave.Model.Task.ITaskManager.Map
  type: Property
  source:
    remote:
      path: EasySave/Model/Task/ITaskManager.cs
      branch: master
      repo: https://dev.azure.com/Groupe5/Projet%20Cadrant%202019/_git/Projet%20Cadrant%202019
    id: Map
    path: Model/Task/ITaskManager.cs
    startLine: 14
  assemblies:
  - EasySave
  namespace: EasySave.Model.Task
  summary: "\nMap of the tasks.\n"
  example: []
  syntax:
    content: List<Task> Map { get; }
    parameters: []
    return:
      type: System.Collections.Generic.List{EasySave.Model.Task.Task}
    content.vb: ReadOnly Property Map As List(Of Task)
  overload: EasySave.Model.Task.ITaskManager.Map*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: EasySave.Model.Task.ITaskManager.GetTaskByName(System.String)
  commentId: M:EasySave.Model.Task.ITaskManager.GetTaskByName(System.String)
  id: GetTaskByName(System.String)
  parent: EasySave.Model.Task.ITaskManager
  langs:
  - csharp
  - vb
  name: GetTaskByName(String)
  nameWithType: ITaskManager.GetTaskByName(String)
  fullName: EasySave.Model.Task.ITaskManager.GetTaskByName(System.String)
  type: Method
  source:
    remote:
      path: EasySave/Model/Task/ITaskManager.cs
      branch: master
      repo: https://dev.azure.com/Groupe5/Projet%20Cadrant%202019/_git/Projet%20Cadrant%202019
    id: GetTaskByName
    path: Model/Task/ITaskManager.cs
    startLine: 21
  assemblies:
  - EasySave
  namespace: EasySave.Model.Task
  summary: "\nGet a task by its name.\n"
  example: []
  syntax:
    content: Task GetTaskByName(string name)
    parameters:
    - id: name
      type: System.String
      description: Name of the target task
    return:
      type: EasySave.Model.Task.Task
      description: A task or null
    content.vb: Function GetTaskByName(name As String) As Task
  overload: EasySave.Model.Task.ITaskManager.GetTaskByName*
- uid: EasySave.Model.Task.ITaskManager.AddTask(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})
  commentId: M:EasySave.Model.Task.ITaskManager.AddTask(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})
  id: AddTask(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})
  parent: EasySave.Model.Task.ITaskManager
  langs:
  - csharp
  - vb
  name: AddTask(String, String, Dictionary<String, String>)
  nameWithType: ITaskManager.AddTask(String, String, Dictionary<String, String>)
  fullName: EasySave.Model.Task.ITaskManager.AddTask(System.String, System.String, System.Collections.Generic.Dictionary<System.String, System.String>)
  type: Method
  source:
    remote:
      path: EasySave/Model/Task/ITaskManager.cs
      branch: master
      repo: https://dev.azure.com/Groupe5/Projet%20Cadrant%202019/_git/Projet%20Cadrant%202019
    id: AddTask
    path: Model/Task/ITaskManager.cs
    startLine: 29
  assemblies:
  - EasySave
  namespace: EasySave.Model.Task
  summary: "\nAdd a task.\n"
  example: []
  syntax:
    content: void AddTask(string taskName, string cmdName, Dictionary<string, string> options)
    parameters:
    - id: taskName
      type: System.String
      description: Task name
    - id: cmdName
      type: System.String
      description: Command linked to the task
    - id: options
      type: System.Collections.Generic.Dictionary{System.String,System.String}
      description: Options of the linked command
    content.vb: Sub AddTask(taskName As String, cmdName As String, options As Dictionary(Of String, String))
  overload: EasySave.Model.Task.ITaskManager.AddTask*
  nameWithType.vb: ITaskManager.AddTask(String, String, Dictionary(Of String, String))
  fullName.vb: EasySave.Model.Task.ITaskManager.AddTask(System.String, System.String, System.Collections.Generic.Dictionary(Of System.String, System.String))
  name.vb: AddTask(String, String, Dictionary(Of String, String))
- uid: EasySave.Model.Task.ITaskManager.RemoveTask(System.String)
  commentId: M:EasySave.Model.Task.ITaskManager.RemoveTask(System.String)
  id: RemoveTask(System.String)
  parent: EasySave.Model.Task.ITaskManager
  langs:
  - csharp
  - vb
  name: RemoveTask(String)
  nameWithType: ITaskManager.RemoveTask(String)
  fullName: EasySave.Model.Task.ITaskManager.RemoveTask(System.String)
  type: Method
  source:
    remote:
      path: EasySave/Model/Task/ITaskManager.cs
      branch: master
      repo: https://dev.azure.com/Groupe5/Projet%20Cadrant%202019/_git/Projet%20Cadrant%202019
    id: RemoveTask
    path: Model/Task/ITaskManager.cs
    startLine: 35
  assemblies:
  - EasySave
  namespace: EasySave.Model.Task
  summary: "\nRemove a task\n"
  example: []
  syntax:
    content: int RemoveTask(string taskName)
    parameters:
    - id: taskName
      type: System.String
      description: Name of the task to remove
    return:
      type: System.Int32
      description: Number of task removed.
    content.vb: Function RemoveTask(taskName As String) As Integer
  overload: EasySave.Model.Task.ITaskManager.RemoveTask*
references:
- uid: EasySave.Model.Task
  commentId: N:EasySave.Model.Task
  name: EasySave.Model.Task
  nameWithType: EasySave.Model.Task
  fullName: EasySave.Model.Task
- uid: EasySave.Model.Task.ITaskManager.Map*
  commentId: Overload:EasySave.Model.Task.ITaskManager.Map
  name: Map
  nameWithType: ITaskManager.Map
  fullName: EasySave.Model.Task.ITaskManager.Map
- uid: System.Collections.Generic.List{EasySave.Model.Task.Task}
  commentId: T:System.Collections.Generic.List{EasySave.Model.Task.Task}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Task>
  nameWithType: List<Task>
  fullName: System.Collections.Generic.List<EasySave.Model.Task.Task>
  nameWithType.vb: List(Of Task)
  fullName.vb: System.Collections.Generic.List(Of EasySave.Model.Task.Task)
  name.vb: List(Of Task)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EasySave.Model.Task.Task
    name: Task
    nameWithType: Task
    fullName: EasySave.Model.Task.Task
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EasySave.Model.Task.Task
    name: Task
    nameWithType: Task
    fullName: EasySave.Model.Task.Task
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: EasySave.Model.Task.ITaskManager.GetTaskByName*
  commentId: Overload:EasySave.Model.Task.ITaskManager.GetTaskByName
  name: GetTaskByName
  nameWithType: ITaskManager.GetTaskByName
  fullName: EasySave.Model.Task.ITaskManager.GetTaskByName
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: EasySave.Model.Task.Task
  commentId: T:EasySave.Model.Task.Task
  parent: EasySave.Model.Task
  name: Task
  nameWithType: Task
  fullName: EasySave.Model.Task.Task
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EasySave.Model.Task.ITaskManager.AddTask*
  commentId: Overload:EasySave.Model.Task.ITaskManager.AddTask
  name: AddTask
  nameWithType: ITaskManager.AddTask
  fullName: EasySave.Model.Task.ITaskManager.AddTask
- uid: System.Collections.Generic.Dictionary{System.String,System.String}
  commentId: T:System.Collections.Generic.Dictionary{System.String,System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, String>
  nameWithType: Dictionary<String, String>
  fullName: System.Collections.Generic.Dictionary<System.String, System.String>
  nameWithType.vb: Dictionary(Of String, String)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, System.String)
  name.vb: Dictionary(Of String, String)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: EasySave.Model.Task.ITaskManager.RemoveTask*
  commentId: Overload:EasySave.Model.Task.ITaskManager.RemoveTask
  name: RemoveTask
  nameWithType: ITaskManager.RemoveTask
  fullName: EasySave.Model.Task.ITaskManager.RemoveTask
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
