### YamlMime:ManagedReference
items:
- uid: EasySave.Model.Job.JobManager
  commentId: T:EasySave.Model.Job.JobManager
  id: JobManager
  parent: EasySave.Model.Job
  children:
  - EasySave.Model.Job.JobManager.GetJobByName(System.String)
  - EasySave.Model.Job.JobManager.Instance
  - EasySave.Model.Job.JobManager.LoadJobs(EasySave.Model.Task.ITaskManager)
  - EasySave.Model.Job.JobManager.Map
  - EasySave.Model.Job.JobManager.SetOutput(EasySave.Model.Output.Output)
  langs:
  - csharp
  - vb
  name: JobManager
  nameWithType: JobManager
  fullName: EasySave.Model.Job.JobManager
  type: Class
  source:
    remote:
      path: EasySave/Model/Job/JobManager.cs
      branch: master
      repo: https://dev.azure.com/Groupe5/Projet%20Cadrant%202019/_git/Projet%20Cadrant%202019
    id: JobManager
    path: Model/Job/JobManager.cs
    startLine: 11
  assemblies:
  - EasySave
  namespace: EasySave.Model.Job
  summary: "\nSingleton class. Manage the differents commands and instanciate then.\n"
  example: []
  syntax:
    content: 'public sealed class JobManager : IJobManager'
    content.vb: >-
      Public NotInheritable Class JobManager
          Implements IJobManager
  inheritance:
  - System.Object
  implements:
  - EasySave.Model.Job.IJobManager
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: EasySave.Model.Job.JobManager.Map
  commentId: P:EasySave.Model.Job.JobManager.Map
  id: Map
  parent: EasySave.Model.Job.JobManager
  langs:
  - csharp
  - vb
  name: Map
  nameWithType: JobManager.Map
  fullName: EasySave.Model.Job.JobManager.Map
  type: Property
  source:
    remote:
      path: EasySave/Model/Job/JobManager.cs
      branch: master
      repo: https://dev.azure.com/Groupe5/Projet%20Cadrant%202019/_git/Projet%20Cadrant%202019
    id: Map
    path: Model/Job/JobManager.cs
    startLine: 16
  assemblies:
  - EasySave
  namespace: EasySave.Model.Job
  summary: "\nMap of the commands.\n"
  example: []
  syntax:
    content: public List<BaseJob> Map { get; }
    parameters: []
    return:
      type: System.Collections.Generic.List{EasySave.Model.Job.BaseJob}
    content.vb: Public ReadOnly Property Map As List(Of BaseJob)
  overload: EasySave.Model.Job.JobManager.Map*
  implements:
  - EasySave.Model.Job.IJobManager.Map
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EasySave.Model.Job.JobManager.Instance
  commentId: P:EasySave.Model.Job.JobManager.Instance
  id: Instance
  parent: EasySave.Model.Job.JobManager
  langs:
  - csharp
  - vb
  name: Instance
  nameWithType: JobManager.Instance
  fullName: EasySave.Model.Job.JobManager.Instance
  type: Property
  source:
    remote:
      path: EasySave/Model/Job/JobManager.cs
      branch: master
      repo: https://dev.azure.com/Groupe5/Projet%20Cadrant%202019/_git/Projet%20Cadrant%202019
    id: Instance
    path: Model/Job/JobManager.cs
    startLine: 22
  assemblies:
  - EasySave
  namespace: EasySave.Model.Job
  summary: "\nSingleton instance.\n"
  example: []
  syntax:
    content: public static JobManager Instance { get; }
    parameters: []
    return:
      type: EasySave.Model.Job.JobManager
    content.vb: Public Shared ReadOnly Property Instance As JobManager
  overload: EasySave.Model.Job.JobManager.Instance*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: EasySave.Model.Job.JobManager.SetOutput(EasySave.Model.Output.Output)
  commentId: M:EasySave.Model.Job.JobManager.SetOutput(EasySave.Model.Output.Output)
  id: SetOutput(EasySave.Model.Output.Output)
  parent: EasySave.Model.Job.JobManager
  langs:
  - csharp
  - vb
  name: SetOutput(Output)
  nameWithType: JobManager.SetOutput(Output)
  fullName: EasySave.Model.Job.JobManager.SetOutput(EasySave.Model.Output.Output)
  type: Method
  source:
    remote:
      path: EasySave/Model/Job/JobManager.cs
      branch: master
      repo: https://dev.azure.com/Groupe5/Projet%20Cadrant%202019/_git/Projet%20Cadrant%202019
    id: SetOutput
    path: Model/Job/JobManager.cs
    startLine: 29
  assemblies:
  - EasySave
  namespace: EasySave.Model.Job
  syntax:
    content: public void SetOutput(Output output)
    parameters:
    - id: output
      type: EasySave.Model.Output.Output
    content.vb: Public Sub SetOutput(output As Output)
  overload: EasySave.Model.Job.JobManager.SetOutput*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EasySave.Model.Job.JobManager.LoadJobs(EasySave.Model.Task.ITaskManager)
  commentId: M:EasySave.Model.Job.JobManager.LoadJobs(EasySave.Model.Task.ITaskManager)
  id: LoadJobs(EasySave.Model.Task.ITaskManager)
  parent: EasySave.Model.Job.JobManager
  langs:
  - csharp
  - vb
  name: LoadJobs(ITaskManager)
  nameWithType: JobManager.LoadJobs(ITaskManager)
  fullName: EasySave.Model.Job.JobManager.LoadJobs(EasySave.Model.Task.ITaskManager)
  type: Method
  source:
    remote:
      path: EasySave/Model/Job/JobManager.cs
      branch: master
      repo: https://dev.azure.com/Groupe5/Projet%20Cadrant%202019/_git/Projet%20Cadrant%202019
    id: LoadJobs
    path: Model/Job/JobManager.cs
    startLine: 39
  assemblies:
  - EasySave
  namespace: EasySave.Model.Job
  summary: "\nLoad all the commands into a list.\n"
  example: []
  syntax:
    content: public void LoadJobs(ITaskManager taskManager)
    parameters:
    - id: taskManager
      type: EasySave.Model.Task.ITaskManager
      description: Task manager to pass to commands that interact with tasks
    content.vb: Public Sub LoadJobs(taskManager As ITaskManager)
  overload: EasySave.Model.Job.JobManager.LoadJobs*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EasySave.Model.Job.JobManager.GetJobByName(System.String)
  commentId: M:EasySave.Model.Job.JobManager.GetJobByName(System.String)
  id: GetJobByName(System.String)
  parent: EasySave.Model.Job.JobManager
  langs:
  - csharp
  - vb
  name: GetJobByName(String)
  nameWithType: JobManager.GetJobByName(String)
  fullName: EasySave.Model.Job.JobManager.GetJobByName(System.String)
  type: Method
  source:
    remote:
      path: EasySave/Model/Job/JobManager.cs
      branch: master
      repo: https://dev.azure.com/Groupe5/Projet%20Cadrant%202019/_git/Projet%20Cadrant%202019
    id: GetJobByName
    path: Model/Job/JobManager.cs
    startLine: 59
  assemblies:
  - EasySave
  namespace: EasySave.Model.Job
  summary: "\nGet a command by its name.\n"
  example: []
  syntax:
    content: public BaseJob GetJobByName(string name)
    parameters:
    - id: name
      type: System.String
      description: Command name
    return:
      type: EasySave.Model.Job.BaseJob
      description: The command if found, else return null
    content.vb: Public Function GetJobByName(name As String) As BaseJob
  overload: EasySave.Model.Job.JobManager.GetJobByName*
  implements:
  - EasySave.Model.Job.IJobManager.GetJobByName(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: EasySave.Model.Job
  commentId: N:EasySave.Model.Job
  name: EasySave.Model.Job
  nameWithType: EasySave.Model.Job
  fullName: EasySave.Model.Job
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: EasySave.Model.Job.IJobManager
  commentId: T:EasySave.Model.Job.IJobManager
  parent: EasySave.Model.Job
  name: IJobManager
  nameWithType: IJobManager
  fullName: EasySave.Model.Job.IJobManager
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EasySave.Model.Job.JobManager.Map*
  commentId: Overload:EasySave.Model.Job.JobManager.Map
  name: Map
  nameWithType: JobManager.Map
  fullName: EasySave.Model.Job.JobManager.Map
- uid: EasySave.Model.Job.IJobManager.Map
  commentId: P:EasySave.Model.Job.IJobManager.Map
  parent: EasySave.Model.Job.IJobManager
  name: Map
  nameWithType: IJobManager.Map
  fullName: EasySave.Model.Job.IJobManager.Map
- uid: System.Collections.Generic.List{EasySave.Model.Job.BaseJob}
  commentId: T:System.Collections.Generic.List{EasySave.Model.Job.BaseJob}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<BaseJob>
  nameWithType: List<BaseJob>
  fullName: System.Collections.Generic.List<EasySave.Model.Job.BaseJob>
  nameWithType.vb: List(Of BaseJob)
  fullName.vb: System.Collections.Generic.List(Of EasySave.Model.Job.BaseJob)
  name.vb: List(Of BaseJob)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EasySave.Model.Job.BaseJob
    name: BaseJob
    nameWithType: BaseJob
    fullName: EasySave.Model.Job.BaseJob
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EasySave.Model.Job.BaseJob
    name: BaseJob
    nameWithType: BaseJob
    fullName: EasySave.Model.Job.BaseJob
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: EasySave.Model.Job.JobManager.Instance*
  commentId: Overload:EasySave.Model.Job.JobManager.Instance
  name: Instance
  nameWithType: JobManager.Instance
  fullName: EasySave.Model.Job.JobManager.Instance
- uid: EasySave.Model.Job.JobManager
  commentId: T:EasySave.Model.Job.JobManager
  parent: EasySave.Model.Job
  name: JobManager
  nameWithType: JobManager
  fullName: EasySave.Model.Job.JobManager
- uid: EasySave.Model.Job.JobManager.SetOutput*
  commentId: Overload:EasySave.Model.Job.JobManager.SetOutput
  name: SetOutput
  nameWithType: JobManager.SetOutput
  fullName: EasySave.Model.Job.JobManager.SetOutput
- uid: EasySave.Model.Output.Output
  commentId: T:EasySave.Model.Output.Output
  parent: EasySave.Model.Output
  name: Output
  nameWithType: Output
  fullName: EasySave.Model.Output.Output
- uid: EasySave.Model.Output
  commentId: N:EasySave.Model.Output
  name: EasySave.Model.Output
  nameWithType: EasySave.Model.Output
  fullName: EasySave.Model.Output
- uid: EasySave.Model.Job.JobManager.LoadJobs*
  commentId: Overload:EasySave.Model.Job.JobManager.LoadJobs
  name: LoadJobs
  nameWithType: JobManager.LoadJobs
  fullName: EasySave.Model.Job.JobManager.LoadJobs
- uid: EasySave.Model.Task.ITaskManager
  commentId: T:EasySave.Model.Task.ITaskManager
  parent: EasySave.Model.Task
  name: ITaskManager
  nameWithType: ITaskManager
  fullName: EasySave.Model.Task.ITaskManager
- uid: EasySave.Model.Task
  commentId: N:EasySave.Model.Task
  name: EasySave.Model.Task
  nameWithType: EasySave.Model.Task
  fullName: EasySave.Model.Task
- uid: EasySave.Model.Job.JobManager.GetJobByName*
  commentId: Overload:EasySave.Model.Job.JobManager.GetJobByName
  name: GetJobByName
  nameWithType: JobManager.GetJobByName
  fullName: EasySave.Model.Job.JobManager.GetJobByName
- uid: EasySave.Model.Job.IJobManager.GetJobByName(System.String)
  commentId: M:EasySave.Model.Job.IJobManager.GetJobByName(System.String)
  parent: EasySave.Model.Job.IJobManager
  isExternal: true
  name: GetJobByName(String)
  nameWithType: IJobManager.GetJobByName(String)
  fullName: EasySave.Model.Job.IJobManager.GetJobByName(System.String)
  spec.csharp:
  - uid: EasySave.Model.Job.IJobManager.GetJobByName(System.String)
    name: GetJobByName
    nameWithType: IJobManager.GetJobByName
    fullName: EasySave.Model.Job.IJobManager.GetJobByName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EasySave.Model.Job.IJobManager.GetJobByName(System.String)
    name: GetJobByName
    nameWithType: IJobManager.GetJobByName
    fullName: EasySave.Model.Job.IJobManager.GetJobByName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: EasySave.Model.Job.BaseJob
  commentId: T:EasySave.Model.Job.BaseJob
  parent: EasySave.Model.Job
  name: BaseJob
  nameWithType: BaseJob
  fullName: EasySave.Model.Job.BaseJob
