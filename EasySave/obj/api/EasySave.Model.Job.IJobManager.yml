### YamlMime:ManagedReference
items:
- uid: EasySave.Model.Job.IJobManager
  commentId: T:EasySave.Model.Job.IJobManager
  id: IJobManager
  parent: EasySave.Model.Job
  children:
  - EasySave.Model.Job.IJobManager.GetJobByName(System.String)
  - EasySave.Model.Job.IJobManager.Map
  langs:
  - csharp
  - vb
  name: IJobManager
  nameWithType: IJobManager
  fullName: EasySave.Model.Job.IJobManager
  type: Interface
  source:
    remote:
      path: EasySave/Model/Job/IJobManager.cs
      branch: master
      repo: https://dev.azure.com/Groupe5/Projet%20Cadrant%202019/_git/Projet%20Cadrant%202019
    id: IJobManager
    path: Model/Job/IJobManager.cs
    startLine: 10
  assemblies:
  - EasySave
  namespace: EasySave.Model.Job
  summary: "\nInterface to access command manager from commands.\nFor exemple : <see cref=\"!:Specialisation.HelpCommand\"></see>\n"
  example: []
  syntax:
    content: public interface IJobManager
    content.vb: Public Interface IJobManager
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: EasySave.Model.Job.IJobManager.Map
  commentId: P:EasySave.Model.Job.IJobManager.Map
  id: Map
  parent: EasySave.Model.Job.IJobManager
  langs:
  - csharp
  - vb
  name: Map
  nameWithType: IJobManager.Map
  fullName: EasySave.Model.Job.IJobManager.Map
  type: Property
  source:
    remote:
      path: EasySave/Model/Job/IJobManager.cs
      branch: master
      repo: https://dev.azure.com/Groupe5/Projet%20Cadrant%202019/_git/Projet%20Cadrant%202019
    id: Map
    path: Model/Job/IJobManager.cs
    startLine: 15
  assemblies:
  - EasySave
  namespace: EasySave.Model.Job
  summary: "\nMap of the commands.\n"
  example: []
  syntax:
    content: List<BaseJob> Map { get; }
    parameters: []
    return:
      type: System.Collections.Generic.List{EasySave.Model.Job.BaseJob}
    content.vb: ReadOnly Property Map As List(Of BaseJob)
  overload: EasySave.Model.Job.IJobManager.Map*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: EasySave.Model.Job.IJobManager.GetJobByName(System.String)
  commentId: M:EasySave.Model.Job.IJobManager.GetJobByName(System.String)
  id: GetJobByName(System.String)
  parent: EasySave.Model.Job.IJobManager
  langs:
  - csharp
  - vb
  name: GetJobByName(String)
  nameWithType: IJobManager.GetJobByName(String)
  fullName: EasySave.Model.Job.IJobManager.GetJobByName(System.String)
  type: Method
  source:
    remote:
      path: EasySave/Model/Job/IJobManager.cs
      branch: master
      repo: https://dev.azure.com/Groupe5/Projet%20Cadrant%202019/_git/Projet%20Cadrant%202019
    id: GetJobByName
    path: Model/Job/IJobManager.cs
    startLine: 22
  assemblies:
  - EasySave
  namespace: EasySave.Model.Job
  summary: "\nGet a command by its name.\n"
  example: []
  syntax:
    content: BaseJob GetJobByName(string name)
    parameters:
    - id: name
      type: System.String
      description: Name of the target
    return:
      type: EasySave.Model.Job.BaseJob
      description: The command or null
    content.vb: Function GetJobByName(name As String) As BaseJob
  overload: EasySave.Model.Job.IJobManager.GetJobByName*
references:
- uid: EasySave.Model.Job
  commentId: N:EasySave.Model.Job
  name: EasySave.Model.Job
  nameWithType: EasySave.Model.Job
  fullName: EasySave.Model.Job
- uid: EasySave.Model.Job.IJobManager.Map*
  commentId: Overload:EasySave.Model.Job.IJobManager.Map
  name: Map
  nameWithType: IJobManager.Map
  fullName: EasySave.Model.Job.IJobManager.Map
- uid: System.Collections.Generic.List{EasySave.Model.Job.BaseJob}
  commentId: T:System.Collections.Generic.List{EasySave.Model.Job.BaseJob}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<BaseJob>
  nameWithType: List<BaseJob>
  fullName: System.Collections.Generic.List<EasySave.Model.Job.BaseJob>
  nameWithType.vb: List(Of BaseJob)
  fullName.vb: System.Collections.Generic.List(Of EasySave.Model.Job.BaseJob)
  name.vb: List(Of BaseJob)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EasySave.Model.Job.BaseJob
    name: BaseJob
    nameWithType: BaseJob
    fullName: EasySave.Model.Job.BaseJob
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EasySave.Model.Job.BaseJob
    name: BaseJob
    nameWithType: BaseJob
    fullName: EasySave.Model.Job.BaseJob
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: EasySave.Model.Job.IJobManager.GetJobByName*
  commentId: Overload:EasySave.Model.Job.IJobManager.GetJobByName
  name: GetJobByName
  nameWithType: IJobManager.GetJobByName
  fullName: EasySave.Model.Job.IJobManager.GetJobByName
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: EasySave.Model.Job.BaseJob
  commentId: T:EasySave.Model.Job.BaseJob
  parent: EasySave.Model.Job
  name: BaseJob
  nameWithType: BaseJob
  fullName: EasySave.Model.Job.BaseJob
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
