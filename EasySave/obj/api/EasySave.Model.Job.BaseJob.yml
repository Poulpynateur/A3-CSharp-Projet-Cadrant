### YamlMime:ManagedReference
items:
- uid: EasySave.Model.Job.BaseJob
  commentId: T:EasySave.Model.Job.BaseJob
  id: BaseJob
  parent: EasySave.Model.Job
  children:
  - EasySave.Model.Job.BaseJob.#ctor(System.String,System.String)
  - EasySave.Model.Job.BaseJob.CheckOptions(System.Collections.Generic.Dictionary{System.String,System.String})
  - EasySave.Model.Job.BaseJob.Execute(System.Collections.Generic.Dictionary{System.String,System.String})
  - EasySave.Model.Job.BaseJob.Info
  - EasySave.Model.Job.BaseJob.Options
  - EasySave.Model.Job.BaseJob.Output
  - EasySave.Model.Job.BaseJob.ToString
  langs:
  - csharp
  - vb
  name: BaseJob
  nameWithType: BaseJob
  fullName: EasySave.Model.Job.BaseJob
  type: Class
  source:
    remote:
      path: EasySave/Model/Job/BaseJob.cs
      branch: master
      repo: https://dev.azure.com/Groupe5/Projet%20Cadrant%202019/_git/Projet%20Cadrant%202019
    id: BaseJob
    path: Model/Job/BaseJob.cs
    startLine: 10
  assemblies:
  - EasySave
  namespace: EasySave.Model.Job
  summary: "\nBase command class (other command must inherit from this class).\n"
  example: []
  syntax:
    content: public abstract class BaseJob
    content.vb: Public MustInherit Class BaseJob
  inheritance:
  - System.Object
  derivedClasses:
  - EasySave.Model.Job.Specialisation.SaveMirrorJob
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: EasySave.Model.Job.BaseJob.Output
  commentId: P:EasySave.Model.Job.BaseJob.Output
  id: Output
  parent: EasySave.Model.Job.BaseJob
  langs:
  - csharp
  - vb
  name: Output
  nameWithType: BaseJob.Output
  fullName: EasySave.Model.Job.BaseJob.Output
  type: Property
  source:
    remote:
      path: EasySave/Model/Job/BaseJob.cs
      branch: master
      repo: https://dev.azure.com/Groupe5/Projet%20Cadrant%202019/_git/Projet%20Cadrant%202019
    id: Output
    path: Model/Job/BaseJob.cs
    startLine: 12
  assemblies:
  - EasySave
  namespace: EasySave.Model.Job
  syntax:
    content: public static Output Output { get; set; }
    parameters: []
    return:
      type: EasySave.Model.Output.Output
    content.vb: Public Shared Property Output As Output
  overload: EasySave.Model.Job.BaseJob.Output*
  modifiers.csharp:
  - public
  - static
  - get
  - set
  modifiers.vb:
  - Public
  - Shared
- uid: EasySave.Model.Job.BaseJob.Info
  commentId: P:EasySave.Model.Job.BaseJob.Info
  id: Info
  parent: EasySave.Model.Job.BaseJob
  langs:
  - csharp
  - vb
  name: Info
  nameWithType: BaseJob.Info
  fullName: EasySave.Model.Job.BaseJob.Info
  type: Property
  source:
    remote:
      path: EasySave/Model/Job/BaseJob.cs
      branch: master
      repo: https://dev.azure.com/Groupe5/Projet%20Cadrant%202019/_git/Projet%20Cadrant%202019
    id: Info
    path: Model/Job/BaseJob.cs
    startLine: 14
  assemblies:
  - EasySave
  namespace: EasySave.Model.Job
  syntax:
    content: public Option Info { get; }
    parameters: []
    return:
      type: EasySave.Model.Job.Option
    content.vb: 'Public ReadOnly Property Info As '
  overload: EasySave.Model.Job.BaseJob.Info*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EasySave.Model.Job.BaseJob.Options
  commentId: P:EasySave.Model.Job.BaseJob.Options
  id: Options
  parent: EasySave.Model.Job.BaseJob
  langs:
  - csharp
  - vb
  name: Options
  nameWithType: BaseJob.Options
  fullName: EasySave.Model.Job.BaseJob.Options
  type: Property
  source:
    remote:
      path: EasySave/Model/Job/BaseJob.cs
      branch: master
      repo: https://dev.azure.com/Groupe5/Projet%20Cadrant%202019/_git/Projet%20Cadrant%202019
    id: Options
    path: Model/Job/BaseJob.cs
    startLine: 21
  assemblies:
  - EasySave
  namespace: EasySave.Model.Job
  summary: "\nOptions of the command :\n- Key are the option name\n- Value is a regex to validate the option value\n"
  example: []
  syntax:
    content: public List<Option> Options { get; protected set; }
    parameters: []
    return:
      type: System.Collections.Generic.List{EasySave.Model.Job.Option}
    content.vb: Public Property Options As List(Of  Option)
  overload: EasySave.Model.Job.BaseJob.Options*
  modifiers.csharp:
  - public
  - get
  - protected set
  modifiers.vb:
  - Public
  - Get
  - Protected Set
- uid: EasySave.Model.Job.BaseJob.#ctor(System.String,System.String)
  commentId: M:EasySave.Model.Job.BaseJob.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: EasySave.Model.Job.BaseJob
  langs:
  - csharp
  - vb
  name: BaseJob(String, String)
  nameWithType: BaseJob.BaseJob(String, String)
  fullName: EasySave.Model.Job.BaseJob.BaseJob(System.String, System.String)
  type: Constructor
  source:
    remote:
      path: EasySave/Model/Job/BaseJob.cs
      branch: master
      repo: https://dev.azure.com/Groupe5/Projet%20Cadrant%202019/_git/Projet%20Cadrant%202019
    id: .ctor
    path: Model/Job/BaseJob.cs
    startLine: 28
  assemblies:
  - EasySave
  namespace: EasySave.Model.Job
  summary: "\nBaseCommand constructor.\n"
  example: []
  syntax:
    content: public BaseJob(string name, string description)
    parameters:
    - id: name
      type: System.String
      description: Name of the command
    - id: description
      type: System.String
      description: Description of the command
    content.vb: Public Sub New(name As String, description As String)
  overload: EasySave.Model.Job.BaseJob.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EasySave.Model.Job.BaseJob.CheckOptions(System.Collections.Generic.Dictionary{System.String,System.String})
  commentId: M:EasySave.Model.Job.BaseJob.CheckOptions(System.Collections.Generic.Dictionary{System.String,System.String})
  id: CheckOptions(System.Collections.Generic.Dictionary{System.String,System.String})
  parent: EasySave.Model.Job.BaseJob
  langs:
  - csharp
  - vb
  name: CheckOptions(Dictionary<String, String>)
  nameWithType: BaseJob.CheckOptions(Dictionary<String, String>)
  fullName: EasySave.Model.Job.BaseJob.CheckOptions(System.Collections.Generic.Dictionary<System.String, System.String>)
  type: Method
  source:
    remote:
      path: EasySave/Model/Job/BaseJob.cs
      branch: master
      repo: https://dev.azure.com/Groupe5/Projet%20Cadrant%202019/_git/Projet%20Cadrant%202019
    id: CheckOptions
    path: Model/Job/BaseJob.cs
    startLine: 39
  assemblies:
  - EasySave
  namespace: EasySave.Model.Job
  summary: "\nCheck if options :\n- are present\n- are valid (regex match)\n"
  example: []
  syntax:
    content: protected void CheckOptions(Dictionary<string, string> options)
    parameters:
    - id: options
      type: System.Collections.Generic.Dictionary{System.String,System.String}
      description: Options to check
    content.vb: Protected Sub CheckOptions(options As Dictionary(Of String, String))
  overload: EasySave.Model.Job.BaseJob.CheckOptions*
  nameWithType.vb: BaseJob.CheckOptions(Dictionary(Of String, String))
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: EasySave.Model.Job.BaseJob.CheckOptions(System.Collections.Generic.Dictionary(Of System.String, System.String))
  name.vb: CheckOptions(Dictionary(Of String, String))
- uid: EasySave.Model.Job.BaseJob.ToString
  commentId: M:EasySave.Model.Job.BaseJob.ToString
  id: ToString
  parent: EasySave.Model.Job.BaseJob
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: BaseJob.ToString()
  fullName: EasySave.Model.Job.BaseJob.ToString()
  type: Method
  source:
    remote:
      path: EasySave/Model/Job/BaseJob.cs
      branch: master
      repo: https://dev.azure.com/Groupe5/Projet%20Cadrant%202019/_git/Projet%20Cadrant%202019
    id: ToString
    path: Model/Job/BaseJob.cs
    startLine: 63
  assemblies:
  - EasySave
  namespace: EasySave.Model.Job
  summary: "\nDisplay the commands informations, used by <see cref=\"!:Specialisation.HelpCommand\"></see>.\n"
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: String that describe the command and his options.
    content.vb: Public Overrides Function ToString As String
  overridden: System.Object.ToString
  overload: EasySave.Model.Job.BaseJob.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: EasySave.Model.Job.BaseJob.Execute(System.Collections.Generic.Dictionary{System.String,System.String})
  commentId: M:EasySave.Model.Job.BaseJob.Execute(System.Collections.Generic.Dictionary{System.String,System.String})
  id: Execute(System.Collections.Generic.Dictionary{System.String,System.String})
  parent: EasySave.Model.Job.BaseJob
  langs:
  - csharp
  - vb
  name: Execute(Dictionary<String, String>)
  nameWithType: BaseJob.Execute(Dictionary<String, String>)
  fullName: EasySave.Model.Job.BaseJob.Execute(System.Collections.Generic.Dictionary<System.String, System.String>)
  type: Method
  source:
    remote:
      path: EasySave/Model/Job/BaseJob.cs
      branch: master
      repo: https://dev.azure.com/Groupe5/Projet%20Cadrant%202019/_git/Projet%20Cadrant%202019
    id: Execute
    path: Model/Job/BaseJob.cs
    startLine: 84
  assemblies:
  - EasySave
  namespace: EasySave.Model.Job
  summary: "\nExecute the command.\n"
  example: []
  syntax:
    content: public abstract void Execute(Dictionary<string, string> options)
    parameters:
    - id: options
      type: System.Collections.Generic.Dictionary{System.String,System.String}
      description: Options to execute from
    content.vb: Public MustOverride Sub Execute(options As Dictionary(Of String, String))
  overload: EasySave.Model.Job.BaseJob.Execute*
  nameWithType.vb: BaseJob.Execute(Dictionary(Of String, String))
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: EasySave.Model.Job.BaseJob.Execute(System.Collections.Generic.Dictionary(Of System.String, System.String))
  name.vb: Execute(Dictionary(Of String, String))
references:
- uid: EasySave.Model.Job
  commentId: N:EasySave.Model.Job
  name: EasySave.Model.Job
  nameWithType: EasySave.Model.Job
  fullName: EasySave.Model.Job
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EasySave.Model.Job.BaseJob.Output*
  commentId: Overload:EasySave.Model.Job.BaseJob.Output
  name: Output
  nameWithType: BaseJob.Output
  fullName: EasySave.Model.Job.BaseJob.Output
- uid: EasySave.Model.Output.Output
  commentId: T:EasySave.Model.Output.Output
  parent: EasySave.Model.Output
  name: Output
  nameWithType: Output
  fullName: EasySave.Model.Output.Output
- uid: EasySave.Model.Output
  commentId: N:EasySave.Model.Output
  name: EasySave.Model.Output
  nameWithType: EasySave.Model.Output
  fullName: EasySave.Model.Output
- uid: EasySave.Model.Job.BaseJob.Info*
  commentId: Overload:EasySave.Model.Job.BaseJob.Info
  name: Info
  nameWithType: BaseJob.Info
  fullName: EasySave.Model.Job.BaseJob.Info
- uid: EasySave.Model.Job.Option
  commentId: T:EasySave.Model.Job.Option
  parent: EasySave.Model.Job
  name: Option
  nameWithType: Option
  fullName: EasySave.Model.Job.Option
- uid: EasySave.Model.Job.BaseJob.Options*
  commentId: Overload:EasySave.Model.Job.BaseJob.Options
  name: Options
  nameWithType: BaseJob.Options
  fullName: EasySave.Model.Job.BaseJob.Options
- uid: System.Collections.Generic.List{EasySave.Model.Job.Option}
  commentId: T:System.Collections.Generic.List{EasySave.Model.Job.Option}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Option>
  nameWithType: List<Option>
  fullName: System.Collections.Generic.List<EasySave.Model.Job.Option>
  nameWithType.vb: List(Of Option)
  fullName.vb: System.Collections.Generic.List(Of EasySave.Model.Job.Option)
  name.vb: List(Of Option)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EasySave.Model.Job.Option
    name: Option
    nameWithType: Option
    fullName: EasySave.Model.Job.Option
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EasySave.Model.Job.Option
    name: Option
    nameWithType: Option
    fullName: EasySave.Model.Job.Option
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: EasySave.Model.Job.BaseJob.#ctor*
  commentId: Overload:EasySave.Model.Job.BaseJob.#ctor
  name: BaseJob
  nameWithType: BaseJob.BaseJob
  fullName: EasySave.Model.Job.BaseJob.BaseJob
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: EasySave.Model.Job.BaseJob.CheckOptions*
  commentId: Overload:EasySave.Model.Job.BaseJob.CheckOptions
  name: CheckOptions
  nameWithType: BaseJob.CheckOptions
  fullName: EasySave.Model.Job.BaseJob.CheckOptions
- uid: System.Collections.Generic.Dictionary{System.String,System.String}
  commentId: T:System.Collections.Generic.Dictionary{System.String,System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, String>
  nameWithType: Dictionary<String, String>
  fullName: System.Collections.Generic.Dictionary<System.String, System.String>
  nameWithType.vb: Dictionary(Of String, String)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, System.String)
  name.vb: Dictionary(Of String, String)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EasySave.Model.Job.BaseJob.ToString*
  commentId: Overload:EasySave.Model.Job.BaseJob.ToString
  name: ToString
  nameWithType: BaseJob.ToString
  fullName: EasySave.Model.Job.BaseJob.ToString
- uid: EasySave.Model.Job.BaseJob.Execute*
  commentId: Overload:EasySave.Model.Job.BaseJob.Execute
  name: Execute
  nameWithType: BaseJob.Execute
  fullName: EasySave.Model.Job.BaseJob.Execute
