### YamlMime:ManagedReference
items:
- uid: EasySave.Model.Output.Encrypt
  commentId: T:EasySave.Model.Output.Encrypt
  id: Encrypt
  parent: EasySave.Model.Output
  children:
  - EasySave.Model.Output.Encrypt.#ctor(System.Collections.Generic.List{System.String})
  - EasySave.Model.Output.Encrypt.CryptFormat
  - EasySave.Model.Output.Encrypt.EncryptFileCryptoSoft(System.String,System.String)
  - EasySave.Model.Output.Encrypt.IsEncryptTarget(System.String)
  langs:
  - csharp
  - vb
  name: Encrypt
  nameWithType: Encrypt
  fullName: EasySave.Model.Output.Encrypt
  type: Class
  source:
    remote:
      path: EasySave/Model/Output/Encrypt.cs
      branch: master
      repo: https://dev.azure.com/Groupe5/Projet%20Cadrant%202019/_git/Projet%20Cadrant%202019
    id: Encrypt
    path: Model/Output/Encrypt.cs
    startLine: 15
  assemblies:
  - EasySave
  namespace: EasySave.Model.Output
  summary: "\nEncrypt the save.\n"
  example: []
  syntax:
    content: public class Encrypt
    content.vb: Public Class Encrypt
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: EasySave.Model.Output.Encrypt.CryptFormat
  commentId: P:EasySave.Model.Output.Encrypt.CryptFormat
  id: CryptFormat
  parent: EasySave.Model.Output.Encrypt
  langs:
  - csharp
  - vb
  name: CryptFormat
  nameWithType: Encrypt.CryptFormat
  fullName: EasySave.Model.Output.Encrypt.CryptFormat
  type: Property
  source:
    remote:
      path: EasySave/Model/Output/Encrypt.cs
      branch: master
      repo: https://dev.azure.com/Groupe5/Projet%20Cadrant%202019/_git/Projet%20Cadrant%202019
    id: CryptFormat
    path: Model/Output/Encrypt.cs
    startLine: 20
  assemblies:
  - EasySave
  namespace: EasySave.Model.Output
  syntax:
    content: public List<string> CryptFormat { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.List{System.String}
    content.vb: Public Property CryptFormat As List(Of String)
  overload: EasySave.Model.Output.Encrypt.CryptFormat*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: EasySave.Model.Output.Encrypt.#ctor(System.Collections.Generic.List{System.String})
  commentId: M:EasySave.Model.Output.Encrypt.#ctor(System.Collections.Generic.List{System.String})
  id: '#ctor(System.Collections.Generic.List{System.String})'
  parent: EasySave.Model.Output.Encrypt
  langs:
  - csharp
  - vb
  name: Encrypt(List<String>)
  nameWithType: Encrypt.Encrypt(List<String>)
  fullName: EasySave.Model.Output.Encrypt.Encrypt(System.Collections.Generic.List<System.String>)
  type: Constructor
  source:
    remote:
      path: EasySave/Model/Output/Encrypt.cs
      branch: master
      repo: https://dev.azure.com/Groupe5/Projet%20Cadrant%202019/_git/Projet%20Cadrant%202019
    id: .ctor
    path: Model/Output/Encrypt.cs
    startLine: 22
  assemblies:
  - EasySave
  namespace: EasySave.Model.Output
  syntax:
    content: public Encrypt(List<string> cryptFormat)
    parameters:
    - id: cryptFormat
      type: System.Collections.Generic.List{System.String}
    content.vb: Public Sub New(cryptFormat As List(Of String))
  overload: EasySave.Model.Output.Encrypt.#ctor*
  nameWithType.vb: Encrypt.Encrypt(List(Of String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EasySave.Model.Output.Encrypt.Encrypt(System.Collections.Generic.List(Of System.String))
  name.vb: Encrypt(List(Of String))
- uid: EasySave.Model.Output.Encrypt.IsEncryptTarget(System.String)
  commentId: M:EasySave.Model.Output.Encrypt.IsEncryptTarget(System.String)
  id: IsEncryptTarget(System.String)
  parent: EasySave.Model.Output.Encrypt
  langs:
  - csharp
  - vb
  name: IsEncryptTarget(String)
  nameWithType: Encrypt.IsEncryptTarget(String)
  fullName: EasySave.Model.Output.Encrypt.IsEncryptTarget(System.String)
  type: Method
  source:
    remote:
      path: EasySave/Model/Output/Encrypt.cs
      branch: master
      repo: https://dev.azure.com/Groupe5/Projet%20Cadrant%202019/_git/Projet%20Cadrant%202019
    id: IsEncryptTarget
    path: Model/Output/Encrypt.cs
    startLine: 33
  assemblies:
  - EasySave
  namespace: EasySave.Model.Output
  summary: "\nCheck if the target need to be crypted with the given format.\n"
  example: []
  syntax:
    content: public bool IsEncryptTarget(string filePath)
    parameters:
    - id: filePath
      type: System.String
      description: Given path by the user
    return:
      type: System.Boolean
      description: The file crypted format
    content.vb: Public Function IsEncryptTarget(filePath As String) As Boolean
  overload: EasySave.Model.Output.Encrypt.IsEncryptTarget*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EasySave.Model.Output.Encrypt.EncryptFileCryptoSoft(System.String,System.String)
  commentId: M:EasySave.Model.Output.Encrypt.EncryptFileCryptoSoft(System.String,System.String)
  id: EncryptFileCryptoSoft(System.String,System.String)
  parent: EasySave.Model.Output.Encrypt
  langs:
  - csharp
  - vb
  name: EncryptFileCryptoSoft(String, String)
  nameWithType: Encrypt.EncryptFileCryptoSoft(String, String)
  fullName: EasySave.Model.Output.Encrypt.EncryptFileCryptoSoft(System.String, System.String)
  type: Method
  source:
    remote:
      path: EasySave/Model/Output/Encrypt.cs
      branch: master
      repo: https://dev.azure.com/Groupe5/Projet%20Cadrant%202019/_git/Projet%20Cadrant%202019
    id: EncryptFileCryptoSoft
    path: Model/Output/Encrypt.cs
    startLine: 49
  assemblies:
  - EasySave
  namespace: EasySave.Model.Output
  summary: "\nEncrypt all the files.\n"
  example: []
  syntax:
    content: public int EncryptFileCryptoSoft(string pathFrom, string pathTo)
    parameters:
    - id: pathFrom
      type: System.String
      description: Entered source path from the user
    - id: pathTo
      type: System.String
      description: Entered target path from the user
    return:
      type: System.Int32
    content.vb: Public Function EncryptFileCryptoSoft(pathFrom As String, pathTo As String) As Integer
  overload: EasySave.Model.Output.Encrypt.EncryptFileCryptoSoft*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: EasySave.Model.Output
  commentId: N:EasySave.Model.Output
  name: EasySave.Model.Output
  nameWithType: EasySave.Model.Output
  fullName: EasySave.Model.Output
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EasySave.Model.Output.Encrypt.CryptFormat*
  commentId: Overload:EasySave.Model.Output.Encrypt.CryptFormat
  name: CryptFormat
  nameWithType: Encrypt.CryptFormat
  fullName: EasySave.Model.Output.Encrypt.CryptFormat
- uid: System.Collections.Generic.List{System.String}
  commentId: T:System.Collections.Generic.List{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<String>
  nameWithType: List<String>
  fullName: System.Collections.Generic.List<System.String>
  nameWithType.vb: List(Of String)
  fullName.vb: System.Collections.Generic.List(Of System.String)
  name.vb: List(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: EasySave.Model.Output.Encrypt.#ctor*
  commentId: Overload:EasySave.Model.Output.Encrypt.#ctor
  name: Encrypt
  nameWithType: Encrypt.Encrypt
  fullName: EasySave.Model.Output.Encrypt.Encrypt
- uid: EasySave.Model.Output.Encrypt.IsEncryptTarget*
  commentId: Overload:EasySave.Model.Output.Encrypt.IsEncryptTarget
  name: IsEncryptTarget
  nameWithType: Encrypt.IsEncryptTarget
  fullName: EasySave.Model.Output.Encrypt.IsEncryptTarget
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: EasySave.Model.Output.Encrypt.EncryptFileCryptoSoft*
  commentId: Overload:EasySave.Model.Output.Encrypt.EncryptFileCryptoSoft
  name: EncryptFileCryptoSoft
  nameWithType: Encrypt.EncryptFileCryptoSoft
  fullName: EasySave.Model.Output.Encrypt.EncryptFileCryptoSoft
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
