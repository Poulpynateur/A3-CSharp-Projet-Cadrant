### YamlMime:ManagedReference
items:
- uid: EasySave.Model.Model
  commentId: T:EasySave.Model.Model
  id: Model
  parent: EasySave.Model
  children:
  - EasySave.Model.Model.#ctor
  - EasySave.Model.Model.GetDisplayable
  - EasySave.Model.Model.GetEncryptFormat
  - EasySave.Model.Model.GetErpBlacklist
  - EasySave.Model.Model.GetJobByName(System.String)
  - EasySave.Model.Model.GetTasksNames
  - EasySave.Model.Model.SetEncryptFormat(System.Collections.Generic.List{System.String})
  - EasySave.Model.Model.SetErpBlacklist(System.Collections.Generic.List{System.String})
  langs:
  - csharp
  - vb
  name: Model
  nameWithType: Model
  fullName: EasySave.Model.Model
  type: Class
  source:
    remote:
      path: EasySave/Model/Model.cs
      branch: master
      repo: https://dev.azure.com/Groupe5/Projet%20Cadrant%202019/_git/Projet%20Cadrant%202019
    id: Model
    path: Model/Model.cs
    startLine: 14
  assemblies:
  - EasySave
  namespace: EasySave.Model
  summary: "\nDefine commands and how to interact with configuration.\n"
  example: []
  syntax:
    content: 'public class Model : IModel'
    content.vb: >-
      Public Class Model
          Implements IModel
  inheritance:
  - System.Object
  implements:
  - EasySave.Model.IModel
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: EasySave.Model.Model.#ctor
  commentId: M:EasySave.Model.Model.#ctor
  id: '#ctor'
  parent: EasySave.Model.Model
  langs:
  - csharp
  - vb
  name: Model()
  nameWithType: Model.Model()
  fullName: EasySave.Model.Model.Model()
  type: Constructor
  source:
    remote:
      path: EasySave/Model/Model.cs
      branch: master
      repo: https://dev.azure.com/Groupe5/Projet%20Cadrant%202019/_git/Projet%20Cadrant%202019
    id: .ctor
    path: Model/Model.cs
    startLine: 21
  assemblies:
  - EasySave
  namespace: EasySave.Model
  syntax:
    content: public Model()
    content.vb: Public Sub New
  overload: EasySave.Model.Model.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EasySave.Model.Model.GetJobByName(System.String)
  commentId: M:EasySave.Model.Model.GetJobByName(System.String)
  id: GetJobByName(System.String)
  parent: EasySave.Model.Model
  langs:
  - csharp
  - vb
  name: GetJobByName(String)
  nameWithType: Model.GetJobByName(String)
  fullName: EasySave.Model.Model.GetJobByName(System.String)
  type: Method
  source:
    remote:
      path: EasySave/Model/Model.cs
      branch: master
      repo: https://dev.azure.com/Groupe5/Projet%20Cadrant%202019/_git/Projet%20Cadrant%202019
    id: GetJobByName
    path: Model/Model.cs
    startLine: 38
  assemblies:
  - EasySave
  namespace: EasySave.Model
  summary: "\nGet a command by name, use <xref href=\"EasySave.Model.Job.JobManager.GetJobByName(System.String)\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public BaseJob GetJobByName(string name)
    parameters:
    - id: name
      type: System.String
      description: ''
    return:
      type: EasySave.Model.Job.BaseJob
      description: Return a <see cref="!:BaseCommand"></see> or null if not found
    content.vb: Public Function GetJobByName(name As String) As BaseJob
  overload: EasySave.Model.Model.GetJobByName*
  implements:
  - EasySave.Model.IModel.GetJobByName(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EasySave.Model.Model.GetTasksNames
  commentId: M:EasySave.Model.Model.GetTasksNames
  id: GetTasksNames
  parent: EasySave.Model.Model
  langs:
  - csharp
  - vb
  name: GetTasksNames()
  nameWithType: Model.GetTasksNames()
  fullName: EasySave.Model.Model.GetTasksNames()
  type: Method
  source:
    remote:
      path: EasySave/Model/Model.cs
      branch: master
      repo: https://dev.azure.com/Groupe5/Projet%20Cadrant%202019/_git/Projet%20Cadrant%202019
    id: GetTasksNames
    path: Model/Model.cs
    startLine: 43
  assemblies:
  - EasySave
  namespace: EasySave.Model
  syntax:
    content: public IEnumerable<Tuple<string, string>> GetTasksNames()
    return:
      type: System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.String}}
    content.vb: Public Function GetTasksNames As IEnumerable(Of Tuple(Of String, String))
  overload: EasySave.Model.Model.GetTasksNames*
  implements:
  - EasySave.Model.IModel.GetTasksNames
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EasySave.Model.Model.GetDisplayable
  commentId: M:EasySave.Model.Model.GetDisplayable
  id: GetDisplayable
  parent: EasySave.Model.Model
  langs:
  - csharp
  - vb
  name: GetDisplayable()
  nameWithType: Model.GetDisplayable()
  fullName: EasySave.Model.Model.GetDisplayable()
  type: Method
  source:
    remote:
      path: EasySave/Model/Model.cs
      branch: master
      repo: https://dev.azure.com/Groupe5/Projet%20Cadrant%202019/_git/Projet%20Cadrant%202019
    id: GetDisplayable
    path: Model/Model.cs
    startLine: 48
  assemblies:
  - EasySave
  namespace: EasySave.Model
  syntax:
    content: public IDisplayable GetDisplayable()
    return:
      type: EasySave.Helpers.IDisplayable
    content.vb: Public Function GetDisplayable As IDisplayable
  overload: EasySave.Model.Model.GetDisplayable*
  implements:
  - EasySave.Model.IModel.GetDisplayable
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EasySave.Model.Model.SetErpBlacklist(System.Collections.Generic.List{System.String})
  commentId: M:EasySave.Model.Model.SetErpBlacklist(System.Collections.Generic.List{System.String})
  id: SetErpBlacklist(System.Collections.Generic.List{System.String})
  parent: EasySave.Model.Model
  langs:
  - csharp
  - vb
  name: SetErpBlacklist(List<String>)
  nameWithType: Model.SetErpBlacklist(List<String>)
  fullName: EasySave.Model.Model.SetErpBlacklist(System.Collections.Generic.List<System.String>)
  type: Method
  source:
    remote:
      path: EasySave/Model/Model.cs
      branch: master
      repo: https://dev.azure.com/Groupe5/Projet%20Cadrant%202019/_git/Projet%20Cadrant%202019
    id: SetErpBlacklist
    path: Model/Model.cs
    startLine: 53
  assemblies:
  - EasySave
  namespace: EasySave.Model
  syntax:
    content: public void SetErpBlacklist(List<string> erp)
    parameters:
    - id: erp
      type: System.Collections.Generic.List{System.String}
    content.vb: Public Sub SetErpBlacklist(erp As List(Of String))
  overload: EasySave.Model.Model.SetErpBlacklist*
  implements:
  - EasySave.Model.IModel.SetErpBlacklist(System.Collections.Generic.List{System.String})
  nameWithType.vb: Model.SetErpBlacklist(List(Of String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EasySave.Model.Model.SetErpBlacklist(System.Collections.Generic.List(Of System.String))
  name.vb: SetErpBlacklist(List(Of String))
- uid: EasySave.Model.Model.GetErpBlacklist
  commentId: M:EasySave.Model.Model.GetErpBlacklist
  id: GetErpBlacklist
  parent: EasySave.Model.Model
  langs:
  - csharp
  - vb
  name: GetErpBlacklist()
  nameWithType: Model.GetErpBlacklist()
  fullName: EasySave.Model.Model.GetErpBlacklist()
  type: Method
  source:
    remote:
      path: EasySave/Model/Model.cs
      branch: master
      repo: https://dev.azure.com/Groupe5/Projet%20Cadrant%202019/_git/Projet%20Cadrant%202019
    id: GetErpBlacklist
    path: Model/Model.cs
    startLine: 58
  assemblies:
  - EasySave
  namespace: EasySave.Model
  syntax:
    content: public List<string> GetErpBlacklist()
    return:
      type: System.Collections.Generic.List{System.String}
    content.vb: Public Function GetErpBlacklist As List(Of String)
  overload: EasySave.Model.Model.GetErpBlacklist*
  implements:
  - EasySave.Model.IModel.GetErpBlacklist
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EasySave.Model.Model.SetEncryptFormat(System.Collections.Generic.List{System.String})
  commentId: M:EasySave.Model.Model.SetEncryptFormat(System.Collections.Generic.List{System.String})
  id: SetEncryptFormat(System.Collections.Generic.List{System.String})
  parent: EasySave.Model.Model
  langs:
  - csharp
  - vb
  name: SetEncryptFormat(List<String>)
  nameWithType: Model.SetEncryptFormat(List<String>)
  fullName: EasySave.Model.Model.SetEncryptFormat(System.Collections.Generic.List<System.String>)
  type: Method
  source:
    remote:
      path: EasySave/Model/Model.cs
      branch: master
      repo: https://dev.azure.com/Groupe5/Projet%20Cadrant%202019/_git/Projet%20Cadrant%202019
    id: SetEncryptFormat
    path: Model/Model.cs
    startLine: 62
  assemblies:
  - EasySave
  namespace: EasySave.Model
  syntax:
    content: public void SetEncryptFormat(List<string> format)
    parameters:
    - id: format
      type: System.Collections.Generic.List{System.String}
    content.vb: Public Sub SetEncryptFormat(format As List(Of String))
  overload: EasySave.Model.Model.SetEncryptFormat*
  implements:
  - EasySave.Model.IModel.SetEncryptFormat(System.Collections.Generic.List{System.String})
  nameWithType.vb: Model.SetEncryptFormat(List(Of String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EasySave.Model.Model.SetEncryptFormat(System.Collections.Generic.List(Of System.String))
  name.vb: SetEncryptFormat(List(Of String))
- uid: EasySave.Model.Model.GetEncryptFormat
  commentId: M:EasySave.Model.Model.GetEncryptFormat
  id: GetEncryptFormat
  parent: EasySave.Model.Model
  langs:
  - csharp
  - vb
  name: GetEncryptFormat()
  nameWithType: Model.GetEncryptFormat()
  fullName: EasySave.Model.Model.GetEncryptFormat()
  type: Method
  source:
    remote:
      path: EasySave/Model/Model.cs
      branch: master
      repo: https://dev.azure.com/Groupe5/Projet%20Cadrant%202019/_git/Projet%20Cadrant%202019
    id: GetEncryptFormat
    path: Model/Model.cs
    startLine: 67
  assemblies:
  - EasySave
  namespace: EasySave.Model
  syntax:
    content: public List<string> GetEncryptFormat()
    return:
      type: System.Collections.Generic.List{System.String}
    content.vb: Public Function GetEncryptFormat As List(Of String)
  overload: EasySave.Model.Model.GetEncryptFormat*
  implements:
  - EasySave.Model.IModel.GetEncryptFormat
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: EasySave.Model
  commentId: N:EasySave.Model
  name: EasySave.Model
  nameWithType: EasySave.Model
  fullName: EasySave.Model
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: EasySave.Model.IModel
  commentId: T:EasySave.Model.IModel
  parent: EasySave.Model
  name: IModel
  nameWithType: IModel
  fullName: EasySave.Model.IModel
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EasySave.Model.Model.#ctor*
  commentId: Overload:EasySave.Model.Model.#ctor
  name: Model
  nameWithType: Model.Model
  fullName: EasySave.Model.Model.Model
- uid: EasySave.Model.Job.JobManager.GetJobByName(System.String)
  commentId: M:EasySave.Model.Job.JobManager.GetJobByName(System.String)
  isExternal: true
- uid: EasySave.Model.Model.GetJobByName*
  commentId: Overload:EasySave.Model.Model.GetJobByName
  name: GetJobByName
  nameWithType: Model.GetJobByName
  fullName: EasySave.Model.Model.GetJobByName
- uid: EasySave.Model.IModel.GetJobByName(System.String)
  commentId: M:EasySave.Model.IModel.GetJobByName(System.String)
  parent: EasySave.Model.IModel
  isExternal: true
  name: GetJobByName(String)
  nameWithType: IModel.GetJobByName(String)
  fullName: EasySave.Model.IModel.GetJobByName(System.String)
  spec.csharp:
  - uid: EasySave.Model.IModel.GetJobByName(System.String)
    name: GetJobByName
    nameWithType: IModel.GetJobByName
    fullName: EasySave.Model.IModel.GetJobByName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EasySave.Model.IModel.GetJobByName(System.String)
    name: GetJobByName
    nameWithType: IModel.GetJobByName
    fullName: EasySave.Model.IModel.GetJobByName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: EasySave.Model.Job.BaseJob
  commentId: T:EasySave.Model.Job.BaseJob
  parent: EasySave.Model.Job
  name: BaseJob
  nameWithType: BaseJob
  fullName: EasySave.Model.Job.BaseJob
- uid: EasySave.Model.Job
  commentId: N:EasySave.Model.Job
  name: EasySave.Model.Job
  nameWithType: EasySave.Model.Job
  fullName: EasySave.Model.Job
- uid: EasySave.Model.Model.GetTasksNames*
  commentId: Overload:EasySave.Model.Model.GetTasksNames
  name: GetTasksNames
  nameWithType: Model.GetTasksNames
  fullName: EasySave.Model.Model.GetTasksNames
- uid: EasySave.Model.IModel.GetTasksNames
  commentId: M:EasySave.Model.IModel.GetTasksNames
  parent: EasySave.Model.IModel
  name: GetTasksNames()
  nameWithType: IModel.GetTasksNames()
  fullName: EasySave.Model.IModel.GetTasksNames()
  spec.csharp:
  - uid: EasySave.Model.IModel.GetTasksNames
    name: GetTasksNames
    nameWithType: IModel.GetTasksNames
    fullName: EasySave.Model.IModel.GetTasksNames
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EasySave.Model.IModel.GetTasksNames
    name: GetTasksNames
    nameWithType: IModel.GetTasksNames
    fullName: EasySave.Model.IModel.GetTasksNames
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.String}}
  commentId: T:System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.String}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Tuple<String, String>>
  nameWithType: IEnumerable<Tuple<String, String>>
  fullName: System.Collections.Generic.IEnumerable<System.Tuple<System.String, System.String>>
  nameWithType.vb: IEnumerable(Of Tuple(Of String, String))
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Tuple(Of System.String, System.String))
  name.vb: IEnumerable(Of Tuple(Of String, String))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: EasySave.Model.Model.GetDisplayable*
  commentId: Overload:EasySave.Model.Model.GetDisplayable
  name: GetDisplayable
  nameWithType: Model.GetDisplayable
  fullName: EasySave.Model.Model.GetDisplayable
- uid: EasySave.Model.IModel.GetDisplayable
  commentId: M:EasySave.Model.IModel.GetDisplayable
  parent: EasySave.Model.IModel
  name: GetDisplayable()
  nameWithType: IModel.GetDisplayable()
  fullName: EasySave.Model.IModel.GetDisplayable()
  spec.csharp:
  - uid: EasySave.Model.IModel.GetDisplayable
    name: GetDisplayable
    nameWithType: IModel.GetDisplayable
    fullName: EasySave.Model.IModel.GetDisplayable
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EasySave.Model.IModel.GetDisplayable
    name: GetDisplayable
    nameWithType: IModel.GetDisplayable
    fullName: EasySave.Model.IModel.GetDisplayable
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EasySave.Helpers.IDisplayable
  commentId: T:EasySave.Helpers.IDisplayable
  parent: EasySave.Helpers
  name: IDisplayable
  nameWithType: IDisplayable
  fullName: EasySave.Helpers.IDisplayable
- uid: EasySave.Helpers
  commentId: N:EasySave.Helpers
  name: EasySave.Helpers
  nameWithType: EasySave.Helpers
  fullName: EasySave.Helpers
- uid: EasySave.Model.Model.SetErpBlacklist*
  commentId: Overload:EasySave.Model.Model.SetErpBlacklist
  name: SetErpBlacklist
  nameWithType: Model.SetErpBlacklist
  fullName: EasySave.Model.Model.SetErpBlacklist
- uid: EasySave.Model.IModel.SetErpBlacklist(System.Collections.Generic.List{System.String})
  commentId: M:EasySave.Model.IModel.SetErpBlacklist(System.Collections.Generic.List{System.String})
  parent: EasySave.Model.IModel
  isExternal: true
  name: SetErpBlacklist(List<String>)
  nameWithType: IModel.SetErpBlacklist(List<String>)
  fullName: EasySave.Model.IModel.SetErpBlacklist(System.Collections.Generic.List<System.String>)
  nameWithType.vb: IModel.SetErpBlacklist(List(Of String))
  fullName.vb: EasySave.Model.IModel.SetErpBlacklist(System.Collections.Generic.List(Of System.String))
  name.vb: SetErpBlacklist(List(Of String))
  spec.csharp:
  - uid: EasySave.Model.IModel.SetErpBlacklist(System.Collections.Generic.List{System.String})
    name: SetErpBlacklist
    nameWithType: IModel.SetErpBlacklist
    fullName: EasySave.Model.IModel.SetErpBlacklist
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EasySave.Model.IModel.SetErpBlacklist(System.Collections.Generic.List{System.String})
    name: SetErpBlacklist
    nameWithType: IModel.SetErpBlacklist
    fullName: EasySave.Model.IModel.SetErpBlacklist
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.String}
  commentId: T:System.Collections.Generic.List{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<String>
  nameWithType: List<String>
  fullName: System.Collections.Generic.List<System.String>
  nameWithType.vb: List(Of String)
  fullName.vb: System.Collections.Generic.List(Of System.String)
  name.vb: List(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EasySave.Model.Model.GetErpBlacklist*
  commentId: Overload:EasySave.Model.Model.GetErpBlacklist
  name: GetErpBlacklist
  nameWithType: Model.GetErpBlacklist
  fullName: EasySave.Model.Model.GetErpBlacklist
- uid: EasySave.Model.IModel.GetErpBlacklist
  commentId: M:EasySave.Model.IModel.GetErpBlacklist
  parent: EasySave.Model.IModel
  name: GetErpBlacklist()
  nameWithType: IModel.GetErpBlacklist()
  fullName: EasySave.Model.IModel.GetErpBlacklist()
  spec.csharp:
  - uid: EasySave.Model.IModel.GetErpBlacklist
    name: GetErpBlacklist
    nameWithType: IModel.GetErpBlacklist
    fullName: EasySave.Model.IModel.GetErpBlacklist
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EasySave.Model.IModel.GetErpBlacklist
    name: GetErpBlacklist
    nameWithType: IModel.GetErpBlacklist
    fullName: EasySave.Model.IModel.GetErpBlacklist
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EasySave.Model.Model.SetEncryptFormat*
  commentId: Overload:EasySave.Model.Model.SetEncryptFormat
  name: SetEncryptFormat
  nameWithType: Model.SetEncryptFormat
  fullName: EasySave.Model.Model.SetEncryptFormat
- uid: EasySave.Model.IModel.SetEncryptFormat(System.Collections.Generic.List{System.String})
  commentId: M:EasySave.Model.IModel.SetEncryptFormat(System.Collections.Generic.List{System.String})
  parent: EasySave.Model.IModel
  isExternal: true
  name: SetEncryptFormat(List<String>)
  nameWithType: IModel.SetEncryptFormat(List<String>)
  fullName: EasySave.Model.IModel.SetEncryptFormat(System.Collections.Generic.List<System.String>)
  nameWithType.vb: IModel.SetEncryptFormat(List(Of String))
  fullName.vb: EasySave.Model.IModel.SetEncryptFormat(System.Collections.Generic.List(Of System.String))
  name.vb: SetEncryptFormat(List(Of String))
  spec.csharp:
  - uid: EasySave.Model.IModel.SetEncryptFormat(System.Collections.Generic.List{System.String})
    name: SetEncryptFormat
    nameWithType: IModel.SetEncryptFormat
    fullName: EasySave.Model.IModel.SetEncryptFormat
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EasySave.Model.IModel.SetEncryptFormat(System.Collections.Generic.List{System.String})
    name: SetEncryptFormat
    nameWithType: IModel.SetEncryptFormat
    fullName: EasySave.Model.IModel.SetEncryptFormat
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: EasySave.Model.Model.GetEncryptFormat*
  commentId: Overload:EasySave.Model.Model.GetEncryptFormat
  name: GetEncryptFormat
  nameWithType: Model.GetEncryptFormat
  fullName: EasySave.Model.Model.GetEncryptFormat
- uid: EasySave.Model.IModel.GetEncryptFormat
  commentId: M:EasySave.Model.IModel.GetEncryptFormat
  parent: EasySave.Model.IModel
  name: GetEncryptFormat()
  nameWithType: IModel.GetEncryptFormat()
  fullName: EasySave.Model.IModel.GetEncryptFormat()
  spec.csharp:
  - uid: EasySave.Model.IModel.GetEncryptFormat
    name: GetEncryptFormat
    nameWithType: IModel.GetEncryptFormat
    fullName: EasySave.Model.IModel.GetEncryptFormat
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EasySave.Model.IModel.GetEncryptFormat
    name: GetEncryptFormat
    nameWithType: IModel.GetEncryptFormat
    fullName: EasySave.Model.IModel.GetEncryptFormat
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
