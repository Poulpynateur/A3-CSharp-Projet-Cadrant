<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EasySave</name>
    </assembly>
    <members>
        <member name="T:EasySave.Controller.Controller">
            <summary>
            Manage input from view and execute commands from the model.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:EasySave.Controller.Controller.#ctor(EasySave.Model.IModel,EasySave.View.IView)" -->
        <!-- Badly formed XML comment ignored for member "M:EasySave.Controller.Controller.ExecuteJob(EasySave.Model.Job.BaseJob,System.Collections.Generic.Dictionary{System.String,System.String})" -->
        <!-- Badly formed XML comment ignored for member "M:EasySave.Controller.Controller.HandleQuickSave(EasySave.View.QuickSaveAction,System.Collections.Generic.Dictionary{System.String,System.String})" -->
        <!-- Badly formed XML comment ignored for member "M:EasySave.Controller.Controller.HandleTask(EasySave.View.TaskAction,System.Collections.Generic.Dictionary{System.String,System.String})" -->
        <member name="M:EasySave.Controller.Controller.AssignEvents">
            <summary>
            Assign functions to the differents events.
            </summary>
        </member>
        <member name="M:EasySave.Controller.Controller.Start">
            <summary>
            Start the main programm.
            </summary>
        </member>
        <member name="M:EasySave.Controller.Parser.ParseName(System.String)">
            <summary>
            Method which returns the name of the command
            </summary>
            <param name="input"></param>
            <returns>Command Name</returns>
        </member>
        <member name="M:EasySave.Controller.Parser.ParseOptions(System.String)">
            <summary>
            Method that returns a dictionary containing the name of the option and its value
            </summary>
            <param name="input"></param>
            <returns>Command Option Name and Value</returns>
        </member>
        <member name="T:EasySave.Helpers.Files.FilesHelper">
            <summary>
            Functions to interact with files and folders.
            </summary>
        </member>
        <member name="M:EasySave.Helpers.Files.FilesHelper.GenerateName(System.String)">
            <summary>
            Generate a name from the actual date.
            </summary>
            <param name="name">Name to extend</param>
            <returns>Extended name with actual date.</returns>
        </member>
        <member name="M:EasySave.Helpers.Files.FilesHelper.CopyDirectoryTree(System.String,System.String)">
            <summary>
            Copy a directory tree from a source folder to a target folder.
            </summary>
            <param name="source">Source folder to copy from</param>
            <param name="target">Target folder to copy to</param>
        </member>
        <member name="M:EasySave.Helpers.Files.FilesHelper.GetFilesSize(System.String[])">
            <summary>
            Get the size of an array of files path.
            </summary>
            <param name="files">Array of files path</param>
            <returns>Syze in byte</returns>
        </member>
        <member name="T:EasySave.Helpers.Files.JsonHelper">
            <summary>
            Manage Json file interactions.
            </summary>
        </member>
        <member name="M:EasySave.Helpers.Files.JsonHelper.WriteJson(System.Object,System.String)">
            <summary>
            Write a Json file.
            </summary>
            <param name="data">Data to write</param>
            <param name="path">Target path to write file</param>
        </member>
        <member name="M:EasySave.Helpers.Files.JsonHelper.ReadJson``1(System.String)">
            <summary>
            Read a json format file and parse it.
            </summary>
            <typeparam name="Data">Generic type</typeparam>
            <param name="path">Path to the file to read</param>
            <returns>The file parsed to the Data generic.</returns>
        </member>
        <member name="T:EasySave.Helpers.Statut">
            <summary>
            List of all the possible status of a job.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:EasySave.Helpers.IDisplayable.DisplayUpdate" -->
        <member name="T:EasySave.Model.Output.Encrypt">
            <summary>
            Encrypt the save.
            </summary>
        </member>
        <member name="M:EasySave.Model.Output.Encrypt.IsEncryptTarget(System.String)">
            <summary>
            Check if the target need to be crypted with the given format.
            </summary>
            <param name="filePath">Given path by the user</param>
            <returns>The file crypted format</returns>
        </member>
        <member name="M:EasySave.Model.Output.Encrypt.EncryptFileCryptoSoft(System.String,System.String)">
            <summary>
            Encrypt all the files.
            </summary>
            <param name="pathFrom">Entered source path from the user</param>
            <param name="pathTo">Entered target path from the user</param>
        </member>
        <member name="T:EasySave.Model.Output.Config">
            <summary>
            Load the configuration.
            </summary>
        </member>
        <member name="M:EasySave.Model.Output.Config.LoadErpBlackList">
            <summary>
            Load ERP blacklist.
            </summary>
        </member>
        <member name="M:EasySave.Model.Output.Config.SaveErpBlackList(System.Collections.Generic.List{System.String})">
            <summary>
            Save ERP blacklist.
            </summary>
            <param name="erp">Entered list by the user</param>
        </member>
        <member name="M:EasySave.Model.Output.Config.LoadCryptFormat">
            <summary>
            Load the crypt format of the tasks.
            </summary>
        </member>
        <member name="M:EasySave.Model.Output.Config.SaveCryptFormat(System.Collections.Generic.List{System.String})">
            <summary>
            Save the crypt format of the task
            </summary>
            <param name="format">Entered crypt format by the user</param>
        </member>
        <member name="M:EasySave.Model.Output.Config.LoadDiffSaveConfig(System.String)">
            <summary>
            Load the config of the differential save.
            </summary>
            <param name="path">Entered path by the user</param>
        </member>
        <member name="M:EasySave.Model.Output.Config.SaveDiffSaveConfig(System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            Save the config of the differential save.
            </summary>
            <param name="diffConfign">Entered the differencial save config by the user</param>
            <param name="path">Entered path by the user</param>
        </member>
        <member name="M:EasySave.Model.Output.Config.LoadTasks">
            <summary>
            Load all the tasks.
            </summary>
        </member>
        <member name="M:EasySave.Model.Output.Config.SaveTasks(System.Collections.Generic.List{EasySave.Model.Task.Task})">
            <summary>
            Save a renseigned task.
            </summary>
            <param name="tasks">Save the new tasks in the json file</param>
        </member>
        <member name="T:EasySave.Model.Output.Displayable">
            <summary>
            Display the status of the job.
            </summary>
        </member>
        <member name="T:EasySave.Model.Output.Logger">
            <summary>
            Class used to write logs
            </summary>
        </member>
        <member name="M:EasySave.Model.Output.Logger.#ctor">
            <summary>
            Constructor of the Logger
            </summary>
        </member>
        <member name="M:EasySave.Model.Output.Logger.WriteLog(EasySave.Model.Log)">
            <summary>
            Write a Json file for the log
            </summary>
            <param name="log"></param>
        </member>
        <member name="M:EasySave.Model.Output.Logger.WriteProgress(EasySave.Model.Progress)">
            <summary>
            Write a Json File for the progress
            </summary>
            <param name="progress"></param>
        </member>
        <member name="T:EasySave.Model.Output.Output">
            <summary>
            Class used to instanciate other classes that might output files
            </summary>
        </member>
        <member name="M:EasySave.Model.Output.Output.#ctor">
            <summary>
            Output constructor 
            </summary>
        </member>
        <member name="M:EasySave.Model.Output.Output.CheckErpRunning">
            <summary>
            Check if another process is running
            </summary>
        </member>
        <member name="T:EasySave.Model.IModel">
            <summary>
            Interface to access model.
            </summary>
        </member>
        <member name="M:EasySave.Model.IModel.GetJobByName(System.String)">
            <summary>
            Get a command by its name.
            </summary>
            <param name="name">Name of the target</param>
            <returns>A command or null</returns>
        </member>
        <member name="T:EasySave.Model.Job.BaseJob">
            <summary>
            Base command class (other command must inherit from this class).
            </summary>
        </member>
        <member name="P:EasySave.Model.Job.BaseJob.Options">
            <summary>
            Options of the command :
            - Key are the option name
            - Value is a regex to validate the option value
            </summary>
        </member>
        <member name="M:EasySave.Model.Job.BaseJob.#ctor(System.String,System.String)">
            <summary>
            BaseCommand constructor.
            </summary>
            <param name="name">Name of the command</param>
            <param name="description">Description of the command</param>
        </member>
        <member name="M:EasySave.Model.Job.BaseJob.CheckOptions(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Check if options :
            - are present
            - are valid (regex match)
            </summary>
            <param name="options">Options to check</param>
        </member>
        <member name="M:EasySave.Model.Job.BaseJob.ToString">
            <summary>
            Display the commands informations, used by <see cref="!:Specialisation.HelpCommand"/>.
            </summary>
            <returns>String that describe the command and his options.</returns>
        </member>
        <member name="M:EasySave.Model.Job.BaseJob.Execute(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Execute the command.
            </summary>
            <param name="options">Options to execute from</param>
            <returns>A message if success (otherwise will throw error)</returns>
        </member>
        <member name="T:EasySave.Model.Job.IJobManager">
            <summary>
            Interface to access command manager from commands.
            For exemple : <see cref="!:Specialisation.HelpCommand"/>
            </summary>
        </member>
        <member name="P:EasySave.Model.Job.IJobManager.Map">
            <summary>
            Map of the commands.
            </summary>
        </member>
        <member name="M:EasySave.Model.Job.IJobManager.GetJobByName(System.String)">
            <summary>
            Get a command by its name.
            </summary>
            <param name="name">Name of the target</param>
            <returns>The command or null</returns>
        </member>
        <member name="T:EasySave.Model.Job.JobManager">
            <summary>
            Singleton class. Manage the differents commands and instanciate then.
            </summary>
        </member>
        <member name="P:EasySave.Model.Job.JobManager.Map">
            <summary>
            Map of the commands.
            </summary>
        </member>
        <member name="P:EasySave.Model.Job.JobManager.Instance">
            <summary>
            Singleton instance.
            </summary>
        </member>
        <member name="M:EasySave.Model.Job.JobManager.LoadJobs(EasySave.Model.Task.ITaskManager)">
            <summary>
            Load all the commands into a list.
            </summary>
            <param name="taskManager">Task manager to pass to commands that interact with tasks</param>
            <param name="logger">Used to log informations</param>
        </member>
        <member name="M:EasySave.Model.Job.JobManager.GetJobByName(System.String)">
            <summary>
            Get a command by its name.
            </summary>
            <param name="name">Command name</param>
            <returns>The command if found, else return null</returns>
        </member>
        <member name="T:EasySave.Model.Job.Option">
            <summary>
            All the informations about a qui-save or a task.
            </summary>
        </member>
        <member name="T:EasySave.Model.Job.Specialisation.HelpJob">
            <summary>
            Display all commands and their descriptions.
            </summary>
        </member>
        <member name="M:EasySave.Model.Job.Specialisation.HelpJob.Execute(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            <see cref="!:BaseCommand.Execute(Dictionary&lt;string, string&gt;)"/>
            Show commands informations use the <see cref="!:BaseCommand.ToString"/> function of each commands.
            </summary>
        </member>
        <member name="T:EasySave.Model.Job.Specialisation.SaveDifferentialJob">
            <summary>
            Create a differential save from a source to a target folder.
            </summary>
        </member>
        <member name="M:EasySave.Model.Job.Specialisation.SaveDifferentialJob.CalculateMD5(System.String)">
            <summary>
            Calculate the MD5 checksum of a file.
            </summary>
            <param name="filename">Path to the file</param>
            <returns>MD5 checksum to string format</returns>
        </member>
        <member name="M:EasySave.Model.Job.Specialisation.SaveDifferentialJob.SaveFiles(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Save files from a source folder to a target folder.
            </summary>
            <param name="source">Source folder path</param>
            <param name="target">Target folder path</param>
            <returns>Success message, otherwise throw an error</returns>
        </member>
        <member name="M:EasySave.Model.Job.Specialisation.SaveDifferentialJob.Execute(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            <see cref="!:BaseCommand.Execute(Dictionary&lt;string, string&gt;)"/>
            <see cref="!:BaseCommand.CheckOptions(Dictionary&lt;string, string&gt;)"/>
            Launch the differential save. Check if the folders exists beforewise.
            </summary>
        </member>
        <member name="T:EasySave.Model.Job.Specialisation.SaveMirrorJob">
            <summary>
            Create a mirror save from a source to a target folder.
            </summary>
        </member>
        <member name="M:EasySave.Model.Job.Specialisation.SaveMirrorJob.SaveFiles(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Save files from a source folder to a target folder.
            </summary>
            <param name="source">Source folder path</param>
            <param name="target">Target folder path</param>
            <returns>Success message, otherwise throw an error</returns>
        </member>
        <member name="M:EasySave.Model.Job.Specialisation.SaveMirrorJob.Execute(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            <see cref="!:BaseCommand.Execute(Dictionary&lt;string, string&gt;)"/>
            <see cref="!:BaseCommand.CheckOptions(Dictionary&lt;string, string&gt;)"/>
            Launch the mirro save. Check if the folders exists beforewise.
            </summary>
        </member>
        <member name="T:EasySave.Model.Job.Specialisation.TaskAddJob">
            <summary>
            Add a task.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:EasySave.Model.Job.Specialisation.TaskAddJob.GetUniqueName(System.String)" -->
        <member name="M:EasySave.Model.Job.Specialisation.TaskAddJob.Execute(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            <see cref="!:BaseCommand.Execute(Dictionary&lt;string, string&gt;)"/>
            Create a task with <see cref="M:EasySave.Model.Task.TaskManager.AddTask(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})"/> function.
            </summary>
        </member>
        <member name="T:EasySave.Model.Job.Specialisation.TaskExecutesJob">
            <summary>
            Execute a task, if argument -n is * execute every task.
            </summary>
        </member>
        <member name="M:EasySave.Model.Job.Specialisation.TaskExecutesJob.ExecuteTask(EasySave.Model.Task.Task)">
            <summary>
            Execute a specific task.
            </summary>
            <param name="task">Task to execute</param>
            <returns>Success message, otherwise throw an error</returns>
        </member>
        <member name="M:EasySave.Model.Job.Specialisation.TaskExecutesJob.Execute(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            <see cref="!:BaseCommand.Execute(Dictionary&lt;string, string&gt;)"/>
            Execute one or all tasks in function of the options.
            </summary>
        </member>
        <member name="T:EasySave.Model.Job.Specialisation.TaskListJob">
            <summary>
            Show the list of tasks.
            </summary>
        </member>
        <member name="M:EasySave.Model.Job.Specialisation.TaskListJob.Execute(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            <see cref="!:BaseCommand.Execute(Dictionary&lt;string, string&gt;)"/>
            Show the task list.
            </summary>
        </member>
        <member name="T:EasySave.Model.Job.Specialisation.TaskRemoveJob">
            <summary>
            Remove a task.
            </summary>
        </member>
        <member name="M:EasySave.Model.Job.Specialisation.TaskRemoveJob.Execute(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            <see cref="!:BaseCommand.Execute(Dictionary&lt;string, string&gt;)"/>
            <see cref="!:BaseCommand.CheckOptions(Dictionary&lt;string, string&gt;)"/>
            Remove the given task.
            </summary>
        </member>
        <member name="T:EasySave.Model.Model">
            <summary>
            Define commands and how to interact with configuration.
            </summary>
        </member>
        <member name="M:EasySave.Model.Model.GetJobByName(System.String)">
            <summary>
            Get a command by name, use <see cref="M:EasySave.Model.Job.JobManager.GetJobByName(System.String)"/>
            </summary>
            <param name="name"></param>
            <returns>Return a <see cref="!:BaseCommand"/> or null if not found</returns>
        </member>
        <member name="T:EasySave.Model.Log">
            <summary>
            Format of the log to read from Json.
            </summary>
        </member>
        <member name="M:EasySave.Model.Log.FeedLog(System.String,System.String,System.String,System.Int64,System.TimeSpan)">
            <summary>
            JsonSerializer doesn't permit parameterized constructor.
            </summary>
        </member>
        <member name="T:EasySave.Model.Progress">
            <summary>
             Format of the progress.
            </summary>
        </member>
        <member name="M:EasySave.Model.Progress.FeedProgress(System.Int32,System.Int64)">
            <summary>
            JsonSerializer doesn't permit parameterized constructor.
            </summary>
        </member>
        <member name="M:EasySave.Model.Progress.RefreshProgress(System.String)">
            <summary>
            Refresh the progress object.
            </summary>
        </member>
        <member name="T:EasySave.Model.Task.ITaskManager">
            <summary>
            Interface to access task manager.
            </summary>
        </member>
        <member name="P:EasySave.Model.Task.ITaskManager.Map">
            <summary>
            Map of the tasks.
            </summary>
        </member>
        <member name="M:EasySave.Model.Task.ITaskManager.GetTaskByName(System.String)">
            <summary>
            Get a task by its name.
            </summary>
            <param name="name">Name of the target task</param>
            <returns>A task or null</returns>
        </member>
        <member name="M:EasySave.Model.Task.ITaskManager.AddTask(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Add a task.
            </summary>
            <param name="taskName">Task name</param>
            <param name="cmdName">Command linked to the task</param>
            <param name="options">Options of the linked command</param>
        </member>
        <member name="M:EasySave.Model.Task.ITaskManager.RemoveTask(System.String)">
            <summary>
            Remove a task
            </summary>
            <param name="taskName">Name of the task to remove</param>
            <returns>Number of task removed.</returns>
        </member>
        <member name="T:EasySave.Model.Task.Task">
            <summary>
            Task are entities that can be save and used to launch commands later. For now this class is merely useless, but let's thinks of the futur !
            </summary>
        </member>
        <member name="P:EasySave.Model.Task.Task.Name">
            <summary>
            Name of the task.
            </summary>
        </member>
        <member name="P:EasySave.Model.Task.Task.CreatedAt">
            <summary>
            Date of creation of the task.
            </summary>
        </member>
        <member name="P:EasySave.Model.Task.Task.JobName">
            <summary>
            Name of the command linked to this task.
            </summary>
        </member>
        <member name="P:EasySave.Model.Task.Task.Options">
            <summary>
            List of options of the linked command.
            </summary>
        </member>
        <member name="T:EasySave.Model.Task.TaskManager">
            <summary>
            Singleton class. Manage the task and instanciate then.
            </summary>
        </member>
        <member name="M:EasySave.Model.Task.TaskManager.AddTask(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Add a task to the task list and the config file.
            </summary>
            <param name="taskName">Name of the task</param>
            <param name="cmdName">Name of the command of the task</param>
            <param name="options">Options of the command of the task</param>
        </member>
        <member name="M:EasySave.Model.Task.TaskManager.RemoveTask(System.String)">
            <summary>
            Remove task(s) from the task list and the config file.
            </summary>
            <param name="taskName">Task name to delete</param>
            <returns>Number of task deleted</returns>
        </member>
        <member name="M:EasySave.Model.Task.TaskManager.GetTaskByName(System.String)">
            <summary>
            Get a task by it's name.
            </summary>
            <param name="name"></param>
            <returns>The task if found, else return null</returns>
        </member>
        <member name="T:EasySave.View.Log">
            <summary>
            Logique d'interaction pour Log.xaml
            </summary>
            <summary>
            Log
            </summary>
        </member>
        <member name="M:EasySave.View.Log.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:EasySave.View.IView">
            <summary>
            Interface to access view.
            </summary>
        </member>
        <member name="M:EasySave.View.IView.Start">
            <summary>
            Start the view.
            </summary>
        </member>
        <member name="T:EasySave.View.QuickSaveAction">
            <summary>
            Enum of different save types (either mirror or differential)
            </summary>
        </member>
        <member name="T:EasySave.View.TaskAction">
            <summary>
            Enum of possible actions on tasks (add, remove or execute)
            </summary>
        </member>
        <member name="T:EasySave.View.IWindow">
            <summary>
            Interface of the main window
            </summary>
        </member>
        <member name="T:EasySave.View.MainWindow">
            <summary>
            MainWindow.xaml quick save logic.
            </summary>
            <summary>
            MainWindow.xaml task logic.
            </summary>
            <summary>
            MainWindow.xaml main logic
            </summary>
            <summary>
            MainWindow
            </summary>
        </member>
        <member name="M:EasySave.View.MainWindow.ExecuteQuickSave_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Execute a quick save, get info from the different input box.
            </summary>
            <param name="sender">ExecuteQuickSave</param>
            <param name="e">Cancel the event</param>
        </member>
        <member name="M:EasySave.View.MainWindow.BtnQuickSourcePath_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Open folder context window : <see cref="M:EasySave.View.MainWindow.GetFolderPath(System.Windows.Controls.TextBox)"/>
            </summary>
            <param name="sender">BtnQuickSourcePath</param>
            <param name="e">Cancel the event</param>
        </member>
        <member name="M:EasySave.View.MainWindow.BtnQuickTargetPath_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Open folder context window : <see cref="M:EasySave.View.MainWindow.GetFolderPath(System.Windows.Controls.TextBox)"/>
            </summary>
            <param name="sender">BtnQuickTargetPath</param>
            <param name="e">Cancel the event</param>
        </member>
        <member name="M:EasySave.View.MainWindow.RefreshTaskList">
            <summary>
            Get the list of task from model and display then.
            </summary>
        </member>
        <member name="M:EasySave.View.MainWindow.GetSelectedTasks">
            <summary>
            Get all the task that are selected.
            </summary>
            <returns>A dictionnary with a key "name" that contain the list of task name separated by ';'</returns>
        </member>
        <member name="M:EasySave.View.MainWindow.BtnTaskRemove_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Remove a task <see cref="M:EasySave.View.TaskWindow.RemoveTask(System.Collections.Generic.Dictionary{System.String,System.String})"/>
            </summary>
            <param name="sender">BtnTaskRemove</param>
            <param name="e">Cancel the event</param>
        </member>
        <member name="M:EasySave.View.MainWindow.BtnTaskExecute_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Remove a task <see cref="M:EasySave.View.TaskWindow.ExecuteTask(System.Collections.Generic.Dictionary{System.String,System.String})"/>
            </summary>
            <param name="sender">BtnTaskExecute</param>
            <param name="e">Cancel the event</param>
        </member>
        <member name="E:EasySave.View.MainWindow.QuickSaveEvent">
            <summary>
            Fired when we have quick save inputs.
            </summary>
        </member>
        <member name="E:EasySave.View.MainWindow.TaskEvent">
            <summary>
            Fired when we have task inputs, we pass then to the taskWindow.
            </summary>
        </member>
        <member name="M:EasySave.View.MainWindow.MainWindow_Closing(System.Object,System.ComponentModel.CancelEventArgs)">
            <summary>
            On close event, close the sub windows.
            </summary>
            <param name="sender">MainWindow</param>
            <param name="e">Cancel the event</param>
        </member>
        <member name="M:EasySave.View.MainWindow.DisplayText(EasySave.Helpers.Statut,System.String)">
            <summary>
            Display log in LogTextWrapper.
            </summary>
            <param name="statut">Define the color</param>
            <param name="text">Text to write</param>
        </member>
        <member name="M:EasySave.View.MainWindow.GetFolderPath(System.Windows.Controls.TextBox)">
            <summary>
            Open the "Choose folder" context window and set a TextBox with the result.
            </summary>
            <param name="display">Result target</param>
        </member>
        <member name="M:EasySave.View.MainWindow.ScrollViewer_ScrollChanged(System.Object,System.Windows.Controls.ScrollChangedEventArgs)">
            <summary>
            On scroll event, auto scroll down to last log.
            </summary>
            <param name="sender">LogScrollViewer</param>
            <param name="e">Cancel the event</param>
        </member>
        <member name="M:EasySave.View.MainWindow.BtnParam_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            On click event, open the param window.
            </summary>
            <param name="sender">BtnParam</param>
            <param name="e">Cancel the event</param>
        </member>
        <member name="M:EasySave.View.MainWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:EasySave.View.ParamWindow">
            <summary>
            Logique d'interaction pour Param.xaml
            </summary>
            <summary>
            ParamWindow
            </summary>
        </member>
        <member name="M:EasySave.View.ParamWindow.#ctor(EasySave.Model.IModel)">
            <summary>
            Initialize the parameters window (ERP blacklist and format of the files to encrypt)
            </summary>
            <param name="model"></param>
        </member>
        <member name="M:EasySave.View.ParamWindow.BtnSave_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Event when clicking the save button of the parameters window
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:EasySave.View.ParamWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:EasySave.View.View">
            <summary>
            Display text to console and get inputs.
            </summary>
        </member>
        <member name="M:EasySave.View.View.Start">
            <summary>
            Start the view.
            </summary>
        </member>
        <member name="T:EasySave.View.TaskWindow">
            <summary>
            Logique d'interaction pour Window1.xaml
            </summary>
            <summary>
            TaskWindow
            </summary>
        </member>
        <member name="M:EasySave.View.TaskWindow.#ctor">
            <summary>
            Initialize the task window
            </summary>
        </member>
        <member name="M:EasySave.View.TaskWindow.TaskWindow_Closing(System.Object,System.ComponentModel.CancelEventArgs)">
            <summary>
            Event when the task window is closing
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:EasySave.View.TaskWindow.GetFolderPath(System.Windows.Controls.TextBox)">
            <summary>
            Get the path of the folder in the text box
            </summary>
            <param name="display"></param>
        </member>
        <member name="M:EasySave.View.TaskWindow.btnTaskSourcePath_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Event when the button for choosing the source path is clicked
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:EasySave.View.TaskWindow.btnTaskTargetPath_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Event when the button for choosing the target path is clicked
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:EasySave.View.TaskWindow.ExecuteTaskSave_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Event when the button for executing the task save is clicked
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:EasySave.View.TaskWindow.RemoveTask(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Remove the task 
            </summary>
            <param name="options"></param>
        </member>
        <member name="M:EasySave.View.TaskWindow.ExecuteTask(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Execute the task
            </summary>
            <param name="options"></param>
        </member>
        <member name="M:EasySave.View.TaskWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:EasySave.App">
            <summary>
            Logique d'interaction pour App.xaml
            </summary>
            <summary>
            App
            </summary>
        </member>
        <member name="M:EasySave.App.Main">
            <summary>
            Application Entry Point.
            </summary>
        </member>
        <member name="T:EasySave.Properties.Resources">
            <summary>
              Une classe de ressource fortement typée destinée, entre autres, à la consultation des chaînes localisées.
            </summary>
        </member>
        <member name="P:EasySave.Properties.Resources.ResourceManager">
            <summary>
              Retourne l'instance ResourceManager mise en cache utilisée par cette classe.
            </summary>
        </member>
        <member name="P:EasySave.Properties.Resources.Culture">
            <summary>
              Remplace la propriété CurrentUICulture du thread actuel pour toutes
              les recherches de ressources à l'aide de cette classe de ressource fortement typée.
            </summary>
        </member>
    </members>
</doc>
